{"version":3,"sources":["web_driver_extension_spec.js","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS;AAAG,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AAElG,KAAO,EAAE,SAAQ;AAAG,YAAU,CAAE,KAAO,iCAA+B,CAAC;AACvE,KAAO,EAAE,SAAQ;AAAG,cAAY,CAAE,KAAO,2BAAyB,CAAC;AACnE,KAAO,EAAE,cAAa,CAAE,KAAO,4BAA0B,CAAC;AAE1D,KAAO,EAAE,kBAAiB;AAAG,KAAG;AAAG,SAAO;AAAG,QAAM,CAAE,KAAO,oBAAkB,CAAC;AAE/E,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAS,gBAAc,CAAE,GAAE,CAAG,CAAA,IAAG,CAAG;AAClC,SAAO,CAAA,GAAI,SAAO,AAAC,CAAC,CAClB,WAAU,IAAI,AAAC,CAAC,GAAE,CAAG,EAAC,EAAC,IAAM,CAAA,IAAG,AAAC,CAAC,EAAC,CAAC,QAAQ,AAAC,CAAC,GAAI,cAAY,AAAC,CAAC,EAAC,CAAC,CAAC,CAAE,CACrE,CAAA,IAAG,AAAC,CAAC,OAAM,aAAa,CAAC,QAAQ,AAAC,CAAC,IAAG,CAAC,CACvC,CAAA,kBAAiB,OAAO,AAAC,CAAC,GAAE,CAAC,CAC/B,CAAC,SAAS,AAAC,CAAC,kBAAiB,CAAC,CAAC;EACjC;AAAA,AAEA,SAAO,AAAC,CAAC,2BAA0B,CAAG,EAAC,AAAD,IAAM;AAE1C,KAAC,AAAC,CAAC,yDAAwD,CAAG,EAAC,IAAG,IAAM;AACtE,oBAAc,AAAC,CAAC,CAAC,IAAG,CAAG,KAAG,CAAG,KAAG,CAAC,CAAG,EAAC,SAAQ,CAAG,KAAG,CAAC,CAAC,KAAK,AAAC,CAAE,CAAC,CAAA,IAAM;AAClE,aAAK,AAAC,CAAC,CAAA,GAAG,CAAC,QAAQ,AAAC,CAAC,IAAG,CAAC,CAAC;AAC1B,WAAG,AAAC,EAAC,CAAC;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,mCAAkC,CAAG,EAAC,IAAG,IAAM;AAChD,mBAAa,WAAW,AAAC,CACvB,eAAc,AAAC,CAAC,CAAC,IAAG,CAAC,CAAG,EAAC,SAAQ,CAAG,KAAG,CAAC,CAAC,CACzC,EAAC,GAAE,IAAM;AACP,aAAK,AAAC,CAAC,SAAQ,AAAC,CAAC,GAAE,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AACjC,WAAG,AAAC,EAAC,CAAC;MACR,CACF,CAAC;IACH,CAAC,CAAC;EAEJ,CAAC,CAAC;AACJ;AAAA,AAEA,IAAM,cAAY,QAAU,mBAAiB;AAC3C,AAEA,YAAU,CAAE,EAAC,CAAG;AACd,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,GAAG,EAAI,GAAC,CAAC;EACd;AAAA,AAEA,SAAO,CAAE,YAAW,AAAU,CAAW;AACvC,SAAO,CAAA,aAAY,OAAO,AAAC,CAAC,YAAW,CAAE,SAAQ,CAAC,CAAG,CAAA,IAAG,GAAG,CAAC,CAAC;EAC/D;AAAA,AACF;AClDA,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YD8CF,SAAQ,GC9CiB;EAAC,CAAC,CAAC,CAAC;ADkDrD","file":"/Users/crush/Documents/learning_js/angular/modules/benchpress/test/web_driver_extension_spec.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/modules/benchpress/test/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport { StringMap, ListWrapper } from 'angular2/src/facade/collection';\nimport { isPresent, StringWrapper } from 'angular2/src/facade/lang';\nimport { PromiseWrapper } from 'angular2/src/facade/async';\n\nimport { WebDriverExtension, bind, Injector, Options } from 'benchpress/common';\n\nexport function main() {\n  function createExtension(ids, caps) {\n    return new Injector([\n      ListWrapper.map(ids, (id) => bind(id).toValue(new MockExtension(id)) ),\n      bind(Options.CAPABILITIES).toValue(caps),\n      WebDriverExtension.bindTo(ids)\n    ]).asyncGet(WebDriverExtension);\n  }\n\n  describe('WebDriverExtension.bindTo', () => {\n\n    it('should bind the extension that matches the capabilities', (done) => {\n      createExtension(['m1', 'm2', 'm3'], {'browser': 'm2'}).then( (m) => {\n        expect(m.id).toEqual('m2');\n        done();\n      });\n    });\n\n    it('should throw if there is no match', (done) => {\n      PromiseWrapper.catchError(\n        createExtension(['m1'], {'browser': 'm2'}),\n        (err) => {\n          expect(isPresent(err)).toBe(true);\n          done();\n        }\n      );\n    });\n\n  });\n}\n\nclass MockExtension extends WebDriverExtension {\n  id:string;\n\n  constructor(id) {\n    super();\n    this.id = id;\n  }\n\n  supports(capabilities:StringMap):boolean {\n    return StringWrapper.equals(capabilities['browser'], this.id);\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}