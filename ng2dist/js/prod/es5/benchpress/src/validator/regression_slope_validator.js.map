{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","benchpress/src/validator/regression_slope_validator.js","@traceur/generated/TemplateParser/13","benchpress/src/validator/@traceur/generated/TemplateParser/10","benchpress/src/validator/@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"benchpress/src/validator/regression_slope_validator.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/dist/js/prod/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Validator } from '../validator';\nimport { Statistic } from '../statistic';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A validator that checks the regression slope of a specific metric.\n * Waits for the regression slope to be >=0.\n */\nexport class RegressionSlopeValidator extends Validator {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get METRIC() { return _METRIC; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n\n  _sampleSize:number;\n  _metric:string;\n\n  constructor(sampleSize, metric) {\n    super();\n    this._sampleSize = sampleSize;\n    this._metric = metric;\n  }\n\n  describe():StringMap {\n    return {\n      'sampleSize': this._sampleSize,\n      'regressionSlopeMetric': this._metric\n    };\n  }\n\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    if (completeSample.length >= this._sampleSize) {\n      var latestSample =\n        ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n      var xValues = [];\n      var yValues = [];\n      for (var i = 0; i<latestSample.length; i++) {\n        // For now, we only use the array index as x value.\n        // TODO(tbosch): think about whether we should use time here instead\n        ListWrapper.push(xValues, i);\n        ListWrapper.push(yValues, latestSample[i].values[this._metric]);\n      }\n      var regressionSlope = Statistic.calculateRegressionSlope(\n        xValues, Statistic.calculateMean(xValues),\n        yValues, Statistic.calculateMean(yValues)\n      );\n      return regressionSlope >= 0 ? latestSample : null;\n    } else {\n      return null;\n    }\n  }\n\n}\n\nvar _SAMPLE_SIZE = new OpaqueToken('RegressionSlopeValidator.sampleSize');\nvar _METRIC = new OpaqueToken('RegressionSlopeValidator.metric');\nvar _BINDINGS = [\n  bind(RegressionSlopeValidator).toFactory(\n    (sampleSize, metric) => new RegressionSlopeValidator(sampleSize, metric),\n    [_SAMPLE_SIZE, _METRIC]\n  ),\n  bind(_SAMPLE_SIZE).toValue(10),\n  bind(_METRIC).toValue('script')\n];\n","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}