{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","benchpress/src/validator/size_validator.js","@traceur/generated/TemplateParser/13","benchpress/src/validator/@traceur/generated/TemplateParser/10","benchpress/src/validator/@traceur/generated/TemplateParser/25"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,wFAAoB,UAAS,SAAQ;;;;;;;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,kBAAoB,KAAG,YAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,gBAAoB,KAAG,UAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,oBAAoB,KAAG,cAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;oBGFY,CAAA,SAAQ,AAAC,mBCAjC,SAAS,QAAO;AACN,AAAI,UAAA,gBCQP,SAAM,cAAY,CAQX,IAAG,CAAG;ACjBpB,ADkBI,wBClBU,iBAAiB,AAAC,eAAkB,KAAK,MAAmB,CDkB/D;AACP,aAAG,YAAY,EAAI,KAAG,CAAC;QDlBuB,ACmBhD,CDnBiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;ACoB5C,iBAAO,CAAP,UAAQ,AAAa,CAAA;AACnB,iBACE,EAAA,YAAW,CAAG,CAAA,IAAG,YAAY,CAC/B,CAAC;UACH;AAEA,iBAAO,CAAP,UAAS,cAAiC,CAAuB;AAC/D,eAAI,cAAa,OAAO,GAAK,CAAA,IAAG,YAAY,CAAG;AAC7C,mBAAO,CAAA,WAAU,MAAM,AAAE,CAAA,cAAa,CAAG,CAAA,cAAa,OAAO,EAAI,CAAA,IAAG,YAAY,CAAG,CAAA,cAAa,OAAO,CAAC,CAAC;YAC3G,KAAO;AACL,mBAAO,KAAG,CAAC;YACb;AAAA,UACF;AAAA;AAvBA,YAAW,SAAO,EAAI;AAAE,iBAAO,UAAQ,CAAC;UAAE;AAE1C,YAAW,YAAU,EAAI;AAAE,iBAAO,aAAW,CAAC;UAAE;AAAA,SDVgB,SAAO,CAAC,CAAC;MACnE,AAAC,CCK0B,SAAQ,CDLhB,EDJ2C;AIAtE,WAAK,eAAgB,CAAA,aAAA,UAAA,SAAA,CAAA,aAAA,CACZ,EAAA,GAAE,CAAG,UAAQ,AAAG,CAAA;AAAC,eAAA,ECD1B,CAAA,MAAK,YH4BqB,CAAA,IAAG,CAAE,cAAY,CAAC,CAAA,CAAA,CE3BK;QAAC,CAAC,CAAC,CAAC;mBFqClC,IAAI,YAAW,AAAC,CAAA,0BAAyB,CAAC;gBAE3D,EAAA,IAAI,AAAC,CAAA,aAAY,CAAC,UAAU,AAC1B,EAAC,SAAA,IAAG;aAAM,IAAI,cAAY,AAAE,CAAA,IAAG,CAAC;MAAA,EAC/B,EAAA,YAAW,CAAC,CACf,CACA,CAAA,IAAI,AAAC,CAAA,YAAW,CAAC,QAAQ,AAAE,CAAA,EAAC,CAAC,CAC/B;IL3C+B;EAC3B,CAAA;ADDI,CAAC,CAAC;AMmC8B","file":"benchpress/src/validator/size_validator.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/dist/js/prod/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Validator } from '../validator';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A validator that waits for the sample to have a certain size.\n */\nexport class SizeValidator extends Validator {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get SAMPLE_SIZE() { return _SAMPLE_SIZE; }\n\n  _sampleSize:number;\n\n  constructor(size) {\n    super();\n    this._sampleSize = size;\n  }\n\n  describe():StringMap {\n    return {\n      'sampleSize': this._sampleSize\n    };\n  }\n\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    if (completeSample.length >= this._sampleSize) {\n      return ListWrapper.slice(completeSample, completeSample.length - this._sampleSize, completeSample.length);\n    } else {\n      return null;\n    }\n  }\n\n}\n\nvar _SAMPLE_SIZE = new OpaqueToken('SizeValidator.sampleSize');\nvar _BINDINGS = [\n  bind(SizeValidator).toFactory(\n    (size) => new SizeValidator(size),\n    [_SAMPLE_SIZE]\n  ),\n  bind(_SAMPLE_SIZE).toValue(10)\n];","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}