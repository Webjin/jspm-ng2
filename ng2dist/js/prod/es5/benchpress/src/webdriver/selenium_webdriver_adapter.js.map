{"version":3,"sources":["@traceur/generated/TemplateParser/22","benchpress/src/webdriver/selenium_webdriver_adapter.es6","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13","benchpress/src/webdriver/@traceur/generated/TemplateParser/10","benchpress/src/webdriver/@traceur/generated/TemplateParser/7","benchpress/src/webdriver/selenium_webdriver_adapter.js"],"names":[],"mappings":"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","file":"benchpress/src/webdriver/selenium_webdriver_adapter.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/dist/js/prod/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import { Promise, PromiseWrapper } from 'angular2/src/facade/async';\nimport { bind } from 'angular2/di';\nimport { WebDriverAdapter } from '../web_driver_adapter';\n\nimport webdriver from 'selenium-webdriver';\n\n/**\n * Adapter for the selenium-webdriver.\n */\nexport class SeleniumWebDriverAdapter extends WebDriverAdapter {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get PROTRACTOR_BINDINGS() { return _PROTRACTOR_BINDINGS; }\n\n  _driver:any;\n\n  constructor(driver) {\n    super();\n    this._driver = driver;\n  }\n\n  _convertPromise(thenable) {\n    var completer = PromiseWrapper.completer();\n    thenable.then(\n      // selenium-webdriver uses an own Node.js context,\n      // so we need to convert data into objects of this context.\n      // (e.g. otherwise instanceof checks of rtts_assert would fail)\n      (data) => completer.resolve(convertToLocalProcess(data)),\n      completer.reject\n    );\n    return completer.promise;\n  }\n\n  waitFor(callback):Promise {\n    return this._convertPromise(this._driver.controlFlow().execute(callback));\n  }\n\n  executeScript(script:string):Promise {\n    return this._convertPromise(this._driver.executeScript(script));\n  }\n\n  capabilities():Promise {\n    return this._convertPromise(\n      this._driver.getCapabilities().then( (capsObject) => capsObject.toJSON() )\n    );\n  }\n\n  logs(type:string):Promise {\n    // Needed as selenium-webdriver does not forward\n    // performance logs in the correct way via manage().logs\n    return this._convertPromise(this._driver.schedule(\n      new webdriver.Command(webdriver.CommandName.GET_LOG).\n          setParameter('type', type),\n      'WebDriver.manage().logs().get(' + type + ')'));\n  }\n\n}\n\nfunction convertToLocalProcess(data) {\n  var serialized = JSON.stringify(data);\n  if (''+serialized === 'undefined') {\n    return undefined;\n  }\n  return JSON.parse(serialized);\n}\n\nvar _PROTRACTOR_BINDINGS = [\n  bind(WebDriverAdapter).toFactory( () => new SeleniumWebDriverAdapter(global.browser), [])\n];","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","import {Promise,\n  PromiseWrapper} from 'angular2/src/facade/async';\nimport {bind} from 'angular2/di';\nimport {WebDriverAdapter} from '../web_driver_adapter';\nimport webdriver from 'selenium-webdriver';\nexport class SeleniumWebDriverAdapter extends WebDriverAdapter {\n  static get PROTRACTOR_BINDINGS() {\n    return _PROTRACTOR_BINDINGS;\n  }\n  constructor(driver) {\n    super();\n    this._driver = driver;\n  }\n  _convertPromise(thenable) {\n    var completer = PromiseWrapper.completer();\n    thenable.then((data) => completer.resolve(convertToLocalProcess(data)), completer.reject);\n    return completer.promise;\n  }\n  waitFor(callback) {\n    return this._convertPromise(this._driver.controlFlow().execute(callback));\n  }\n  executeScript(script) {\n    return this._convertPromise(this._driver.executeScript(script));\n  }\n  capabilities() {\n    return this._convertPromise(this._driver.getCapabilities().then((capsObject) => capsObject.toJSON()));\n  }\n  logs(type) {\n    return this._convertPromise(this._driver.schedule(new webdriver.Command(webdriver.CommandName.GET_LOG).setParameter('type', type), 'WebDriver.manage().logs().get(' + type + ')'));\n  }\n}\nObject.defineProperty(SeleniumWebDriverAdapter.prototype.executeScript, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(SeleniumWebDriverAdapter.prototype.logs, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nfunction convertToLocalProcess(data) {\n  var serialized = JSON.stringify(data);\n  if ('' + serialized === 'undefined') {\n    return undefined;\n  }\n  return JSON.parse(serialized);\n}\nvar _PROTRACTOR_BINDINGS = [bind(WebDriverAdapter).toFactory(() => new SeleniumWebDriverAdapter(global.browser), [])];\n\n//# sourceMappingURL=/Users/crush/Documents/learning_js/angular/modules/benchpress/src/webdriver/selenium_webdriver_adapter.map\n\n//# sourceMappingURL=./selenium_webdriver_adapter.map"]}