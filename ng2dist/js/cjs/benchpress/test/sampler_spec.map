{"version":3,"sources":["sampler_spec.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/19","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/15","@traceur/generated/TemplateParser/17","@traceur/generated/TemplateParser/16","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"/Users/crush/Documents/learning_js/angular/modules/benchpress/test/sampler_spec.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/modules/benchpress/test/","sourcesContent":["import {describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport { isBlank, isPresent, BaseException, stringify, Date, DateWrapper } from 'angular2/src/facade/lang';\nimport { ListWrapper, List } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\n\nimport {\n  Sampler, WebDriverAdapter, WebDriverExtension,\n  Validator, Metric, Reporter, Browser,\n  bind, Injector, Options, MeasureValues\n} from 'benchpress/common';\n\nexport function main() {\n  var EMPTY_EXECUTE = () => {};\n\n  describe('sampler', () => {\n    var sampler;\n\n    function createSampler({\n      driver,\n      driverExtension,\n      metric,\n      reporter,\n      validator,\n      forceGc,\n      prepare,\n      execute\n    } = {}) {\n      var time = 1000;\n      if (isBlank(metric)) {\n        metric = new MockMetric([]);\n      }\n      if (isBlank(reporter)) {\n        reporter = new MockReporter([]);\n      }\n      if (isBlank(driver)) {\n        driver = new MockDriverAdapter([]);\n      }\n      if (isBlank(driverExtension)) {\n        driverExtension = new MockDriverExtension([]);\n      }\n      var bindings = ListWrapper.concat(Sampler.BINDINGS, [\n        bind(Metric).toValue(metric),\n        bind(Reporter).toValue(reporter),\n        bind(WebDriverAdapter).toValue(driver),\n        bind(WebDriverExtension).toValue(driverExtension),\n        bind(Options.EXECUTE).toValue(execute),\n        bind(Validator).toValue(validator),\n        bind(Sampler.TIME).toValue( () => DateWrapper.fromMillis(time++) )\n      ]);\n      if (isPresent(prepare)) {\n        ListWrapper.push(bindings, bind(Options.PREPARE).toValue(prepare));\n      }\n      if (isPresent(forceGc)) {\n        ListWrapper.push(bindings, bind(Options.FORCE_GC).toValue(forceGc));\n      }\n\n      sampler = new Injector(bindings).get(Sampler);\n    }\n\n    it('should call the prepare and execute callbacks using WebDriverAdapter.waitFor', (done) => {\n      var log = [];\n      var count = 0;\n      var driver = new MockDriverAdapter([], (callback) => {\n        var result = callback();\n        ListWrapper.push(log, result);\n        return PromiseWrapper.resolve(result);\n      });\n      createSampler({\n        driver: driver,\n        validator: createCountingValidator(2),\n        prepare: () => {\n          return count++;\n        },\n        execute: () => {\n          return count++;\n        }\n      });\n      sampler.sample().then( (_) => {\n        expect(count).toBe(4);\n        expect(log).toEqual([0,1,2,3]);\n        done();\n      });\n\n    });\n\n    it('should call prepare, gc, beginMeasure, execute, gc, endMeasure for every iteration', (done) => {\n      var workCount = 0;\n      var log = [];\n      createSampler({\n        forceGc: true,\n        metric: createCountingMetric(log),\n        driverExtension: new MockDriverExtension(log),\n        validator: createCountingValidator(2),\n        prepare: () => {\n          ListWrapper.push(log, `p${workCount++}`);\n        },\n        execute: () => {\n          ListWrapper.push(log, `w${workCount++}`);\n        }\n      });\n      sampler.sample().then( (_) => {\n        expect(log).toEqual([\n          ['gc'],\n          'p0',\n          ['gc'],\n          ['beginMeasure'],\n          'w1',\n          ['gc'],\n          ['endMeasure', false, {'script': 0}],\n          'p2',\n          ['gc'],\n          ['beginMeasure'],\n          'w3',\n          ['gc'],\n          ['endMeasure', false, {'script': 1}],\n        ]);\n        done();\n      });\n    });\n\n    it('should call execute, gc, endMeasure for every iteration if there is no prepare callback', (done) => {\n      var log = [];\n      var workCount = 0;\n      createSampler({\n        forceGc: true,\n        metric: createCountingMetric(log),\n        driverExtension: new MockDriverExtension(log),\n        validator: createCountingValidator(2),\n        execute: () => {\n          ListWrapper.push(log, `w${workCount++}`);\n        },\n        prepare: null\n      });\n      sampler.sample().then( (_) => {\n        expect(log).toEqual([\n          ['gc'],\n          ['beginMeasure'],\n          'w0',\n          ['gc'],\n          ['endMeasure', true, {'script': 0}],\n          'w1',\n          ['gc'],\n          ['endMeasure', true, {'script': 1}],\n        ]);\n        done();\n      });\n    });\n\n    it('should not gc if the flag is not set', (done) => {\n      var log = [];\n      createSampler({\n        metric: createCountingMetric(),\n        driverExtension: new MockDriverExtension(log),\n        validator: createCountingValidator(2),\n        prepare: EMPTY_EXECUTE,\n        execute: EMPTY_EXECUTE\n      });\n      sampler.sample().then( (_) => {\n        expect(log).toEqual([]);\n        done();\n      });\n    });\n\n    it('should only collect metrics for execute and ignore metrics from prepare', (done) => {\n      var scriptTime = 0;\n      var iterationCount = 1;\n      createSampler({\n        validator: createCountingValidator(2),\n        metric: new MockMetric([], () => {\n          var result = PromiseWrapper.resolve({'script': scriptTime});\n          scriptTime = 0;\n          return result;\n        }),\n        prepare: () => {\n          scriptTime = 1 * iterationCount;\n        },\n        execute: () => {\n          scriptTime = 10 * iterationCount;\n          iterationCount++;\n        }\n      });\n      sampler.sample().then( (state) => {\n        expect(state.completeSample.length).toBe(2);\n        expect(state.completeSample[0]).toEqual(mv(0, 1000, {'script': 10}));\n        expect(state.completeSample[1]).toEqual(mv(1, 1001, {'script': 20}));\n        done();\n      });\n    });\n\n    it('should call the validator for every execution and store the valid sample', (done) => {\n      var log = [];\n      var validSample = [{}];\n\n      createSampler({\n        metric: createCountingMetric(),\n        validator: createCountingValidator(2, validSample, log),\n        execute: EMPTY_EXECUTE\n      });\n      sampler.sample().then( (state) => {\n        expect(state.validSample).toBe(validSample);\n        // TODO(tbosch): Why does this fail??\n        // expect(log).toEqual([\n        //   ['validate', [{'script': 0}], null],\n        //   ['validate', [{'script': 0}, {'script': 1}], validSample]\n        // ]);\n\n        expect(log.length).toBe(2);\n        expect(log[0]).toEqual(\n          ['validate', [mv(0, 1000, {'script': 0})], null]\n        );\n        expect(log[1]).toEqual(\n          ['validate', [mv(0, 1000, {'script': 0}), mv(1, 1001, {'script': 1})], validSample]\n        );\n\n        done();\n      });\n    });\n\n    it('should report the metric values', (done) => {\n      var log = [];\n      var validSample = [{}];\n      createSampler({\n        validator: createCountingValidator(2, validSample),\n        metric: createCountingMetric(),\n        reporter: new MockReporter(log),\n        execute: EMPTY_EXECUTE\n      });\n      sampler.sample().then( (_) => {\n        // TODO(tbosch): Why does this fail??\n        // expect(log).toEqual([\n        //   ['reportMeasureValues', 0, {'script': 0}],\n        //   ['reportMeasureValues', 1, {'script': 1}],\n        //   ['reportSample', [{'script': 0}, {'script': 1}], validSample]\n        // ]);\n        expect(log.length).toBe(3);\n        expect(log[0]).toEqual(\n          ['reportMeasureValues', mv(0, 1000, {'script': 0})]\n        );\n        expect(log[1]).toEqual(\n          ['reportMeasureValues', mv(1, 1001, {'script': 1})]\n        );\n        expect(log[2]).toEqual(\n          ['reportSample', [mv(0, 1000, {'script': 0}), mv(1, 1001, {'script': 1})], validSample]\n        );\n\n        done();\n      });\n    });\n\n  });\n}\n\nfunction mv(runIndex, time, values) {\n  return new MeasureValues(runIndex, DateWrapper.fromMillis(time), values);\n}\n\nfunction createCountingValidator(count, validSample = null, log = null) {\n  return new MockValidator(log, (completeSample) => {\n    count--;\n    if (count === 0) {\n      return isPresent(validSample) ? validSample : completeSample;\n    } else {\n      return null;\n    }\n  });\n}\n\nfunction createCountingMetric(log = null) {\n  var scriptTime = 0;\n  return new MockMetric(log, () => {\n    return { 'script': scriptTime++ };\n  });\n}\n\nclass MockDriverAdapter extends WebDriverAdapter {\n  _log:List;\n  _waitFor:Function;\n  constructor(log = null, waitFor = null) {\n    super();\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n    this._waitFor = waitFor;\n  }\n  waitFor(callback:Function):Promise {\n    if (isPresent(this._waitFor)) {\n      return this._waitFor(callback);\n    } else {\n      return PromiseWrapper.resolve(callback());\n    }\n  }\n}\n\n\nclass MockDriverExtension extends WebDriverExtension {\n  _log:List;\n  constructor(log = null) {\n    super();\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  gc():Promise {\n    ListWrapper.push(this._log, ['gc']);\n    return PromiseWrapper.resolve(null);\n  }\n}\n\nclass MockValidator extends Validator {\n  _validate:Function;\n  _log:List;\n  constructor(log = null, validate = null) {\n    super();\n    this._validate = validate;\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    var stableSample = isPresent(this._validate) ? this._validate(completeSample) : completeSample;\n    ListWrapper.push(this._log, ['validate', completeSample, stableSample]);\n    return stableSample;\n  }\n}\n\nclass MockMetric extends Metric {\n  _endMeasure:Function;\n  _log:List;\n  constructor(log = null, endMeasure = null) {\n    super();\n    this._endMeasure = endMeasure;\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  beginMeasure() {\n    ListWrapper.push(this._log, ['beginMeasure']);\n    return PromiseWrapper.resolve(null);\n  }\n  endMeasure(restart) {\n    var measureValues = isPresent(this._endMeasure) ? this._endMeasure() : {};\n    ListWrapper.push(this._log, ['endMeasure', restart, measureValues]);\n    return PromiseWrapper.resolve(measureValues);\n  }\n}\n\nclass MockReporter extends Reporter {\n  _log:List;\n  constructor(log = null) {\n    super();\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  reportMeasureValues(values):Promise {\n    ListWrapper.push(this._log, ['reportMeasureValues', values]);\n    return PromiseWrapper.resolve(null);\n  }\n  reportSample(completeSample, validSample):Promise {\n    ListWrapper.push(this._log, ['reportSample', completeSample, validSample]);\n    return PromiseWrapper.resolve(null);\n  }\n}","Object.defineProperties(module.exports, $__placeholder__0);","{get: $__placeholder__0}","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true","{value: $__placeholder__0}","var __moduleName = $__placeholder__0;","($__placeholder__0 = require($__placeholder__1),\n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})","var $__placeholder__0 = $__placeholder__1","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}