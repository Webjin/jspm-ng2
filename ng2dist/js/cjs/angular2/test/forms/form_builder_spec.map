{"version":3,"sources":["form_builder_spec.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/19","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1"],"names":[],"mappings":"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","file":"/Users/crush/Documents/learning_js/angular/modules/angular2/test/forms/form_builder_spec.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/modules/angular2/test/forms/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {Control, FormBuilder} from 'angular2/forms';\nimport * as validations from 'angular2/forms';\n\nexport function main() {\n  describe(\"Form Builder\", () => {\n    var b;\n\n    beforeEach(() => {\n      b = new FormBuilder();\n    });\n\n    it(\"should create controls from a value\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n    });\n\n    it(\"should create controls from an array\", () => {\n      var g = b.group({\n        \"login\": [\"some value\"],\n        \"password\": [\"some value\", validations.required]\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].validator).toEqual(validations.required);\n    });\n\n    it(\"should use controls\", () => {\n      var g = b.group({\n        \"login\": b.control(\"some value\", validations.required)\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"login\"].validator).toBe(validations.required);\n    });\n\n    it(\"should create groups with optional controls\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"optionals\": {\"login\" : false}});\n\n      expect(g.contains(\"login\")).toEqual(false);\n    });\n\n    it(\"should create groups with a custom validator\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"validator\": validations.nullValidator});\n\n      expect(g.validator).toBe(validations.nullValidator);\n    });\n\n    it(\"should use default validators when no validators are provided\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n      expect(g.controls[\"login\"].validator).toBe(validations.nullValidator);\n      expect(g.validator).toBe(validations.controlGroupValidator);\n    });\n  });\n}","Object.defineProperties(module.exports, $__placeholder__0);","{get: $__placeholder__0}","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true","{value: $__placeholder__0}","var __moduleName = $__placeholder__0;","($__placeholder__0 = require($__placeholder__1),\n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})"]}