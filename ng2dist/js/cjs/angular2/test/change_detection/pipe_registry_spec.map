{"version":3,"sources":["pipe_registry_spec.js","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/19","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/14","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/crush/Documents/learning_js/angular/modules/angular2/test/change_detection/pipe_registry_spec.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/modules/angular2/test/change_detection/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport {PipeRegistry} from 'angular2/src/change_detection/pipes/pipe_registry';\nimport {Pipe} from 'angular2/src/change_detection/pipes/pipe';\n\nexport function main() {\n  describe(\"pipe registry\", () => {\n    var firstPipe = new Pipe();\n    var secondPipe = new Pipe();\n\n    it(\"should return the first pipe supporting the data type\", () => {\n      var r = new PipeRegistry({\n        \"type\": [\n          new PipeFactory(false, firstPipe),\n          new PipeFactory(true, secondPipe)\n        ]\n      });\n\n      expect(r.get(\"type\", \"some object\")).toBe(secondPipe);\n    });\n\n    it(\"should throw when no matching type\", () => {\n      var r = new PipeRegistry({});\n      expect(() => r.get(\"unknown\", \"some object\")).toThrowError(\n        `Cannot find a pipe for type 'unknown' object 'some object'`\n      );\n    });\n\n    it(\"should throw when no matching pipe\", () => {\n      var r = new PipeRegistry({\n        \"type\" : []\n      });\n\n      expect(() => r.get(\"type\", \"some object\")).toThrowError(\n        `Cannot find a pipe for type 'type' object 'some object'`\n      );\n    });\n  });\n}\n\nclass PipeFactory {\n  shouldSupport:boolean;\n  pipe:any;\n\n  constructor(shouldSupport:boolean, pipe:any) {\n    this.shouldSupport = shouldSupport;\n    this.pipe = pipe;\n  }\n\n  supports(obj):boolean {\n    return this.shouldSupport;\n  }\n\n  create():Pipe {\n    return this.pipe;\n  }\n}","Object.defineProperties(module.exports, $__placeholder__0);","{get: $__placeholder__0}","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true","{value: $__placeholder__0}","var __moduleName = $__placeholder__0;","($__placeholder__0 = require($__placeholder__1),\n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})","var $__placeholder__0 = $__placeholder__1","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}