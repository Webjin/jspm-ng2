{"version":3,"sources":["model.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/1114","@traceur/generated/TemplateParser/1115","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"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","file":"/Users/crush/Documents/learning_js/angular/modules/angular2/src/forms/model.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/modules/angular2/src/forms/","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {StringMap, StringMapWrapper} from 'angular2/src/facade/collection';\nimport {nullValidator, controlGroupValidator} from './validators';\n\nexport const VALID = \"VALID\";\nexport const INVALID = \"INVALID\";\n\n//interface IControl {\n//  get value():any;\n//  validator:Function;\n//  get status():string;\n//  get valid():boolean;\n//  get errors():Map;\n//  updateValue(value:any){}\n//  setParent(parent){}\n//}\n\nexport class AbstractControl {\n  _value:any;\n  _status:string;\n  _errors;\n  _dirty:boolean;\n  _parent:ControlGroup;\n  validator:Function;\n\n  constructor(validator:Function = nullValidator) {\n    this.validator = validator;\n    this._dirty = true;\n  }\n\n  get value() {\n    this._updateIfNeeded();\n    return this._value;\n  }\n\n  get status() {\n    this._updateIfNeeded();\n    return this._status;\n  }\n\n  get valid() {\n    this._updateIfNeeded();\n    return this._status === VALID;\n  }\n\n  get errors() {\n    this._updateIfNeeded();\n    return this._errors;\n  }\n\n  setParent(parent){\n    this._parent = parent;\n  }\n\n  _updateIfNeeded() {\n  }\n\n  _updateParent() {\n    if (isPresent(this._parent)){\n      this._parent._controlChanged();\n    }\n  }\n}\n\nexport class Control extends AbstractControl {\n  constructor(value:any, validator:Function = nullValidator) {\n    super(validator);\n    this._value = value;\n  }\n\n  updateValue(value:any) {\n    this._value = value;\n    this._dirty = true;\n    this._updateParent();\n  }\n\n  _updateIfNeeded() {\n    if (this._dirty) {\n      this._dirty = false;\n      this._errors = this.validator(this);\n      this._status = isPresent(this._errors) ? INVALID : VALID;\n    }\n  }\n}\n\nexport class ControlGroup extends AbstractControl {\n  controls;\n  optionals;\n\n  constructor(controls, optionals = null, validator:Function = controlGroupValidator) {\n    super(validator);\n    this.controls = controls;\n    this.optionals = isPresent(optionals) ? optionals : {};\n    this._setParentForControls();\n  }\n\n  include(controlName:string) {\n    this._dirty = true;\n    StringMapWrapper.set(this.optionals, controlName, true);\n  }\n\n  exclude(controlName:string) {\n    this._dirty = true;\n    StringMapWrapper.set(this.optionals, controlName, false);\n  }\n\n  contains(controlName:string) {\n    var c = StringMapWrapper.contains(this.controls, controlName);\n    return c && this._included(controlName);\n  }\n\n  _setParentForControls() {\n    StringMapWrapper.forEach(this.controls, (control, name) => {\n      control.setParent(this);\n    });\n  }\n\n  _updateIfNeeded() {\n    if (this._dirty) {\n      this._dirty = false;\n      this._value = this._reduceValue();\n      this._errors = this.validator(this);\n      this._status = isPresent(this._errors) ? INVALID : VALID;\n    }\n  }\n\n  _reduceValue() {\n    var newValue = {};\n    StringMapWrapper.forEach(this.controls, (control, name) => {\n      if (this._included(name)) {\n        newValue[name] = control.value;\n      }\n    });\n    return newValue;\n  }\n\n  _controlChanged() {\n    this._dirty = true;\n    this._updateParent();\n  }\n\n  _included(controlName:string):boolean {\n    var isOptional = StringMapWrapper.contains(this.optionals, controlName);\n    return !isOptional || StringMapWrapper.get(this.optionals, controlName);\n  }\n}","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)","assert.type.any","assert.type.any","return assert.returnType(($__placeholder__0), $__placeholder__1)"]}