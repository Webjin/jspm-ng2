{"version":3,"sources":["form_builder_spec.js"],"names":[],"mappings":"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","file":"/Users/crush/Documents/learning_js/angular/modules/angular2/test/forms/form_builder_spec.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/modules/angular2/test/forms/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, el} from 'angular2/test_lib';\nimport {Control, FormBuilder} from 'angular2/forms';\nimport * as validations from 'angular2/forms';\n\nexport function main() {\n  describe(\"Form Builder\", () => {\n    var b;\n\n    beforeEach(() => {\n      b = new FormBuilder();\n    });\n\n    it(\"should create controls from a value\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n    });\n\n    it(\"should create controls from an array\", () => {\n      var g = b.group({\n        \"login\": [\"some value\"],\n        \"password\": [\"some value\", validations.required]\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].value).toEqual(\"some value\");\n      expect(g.controls[\"password\"].validator).toEqual(validations.required);\n    });\n\n    it(\"should use controls\", () => {\n      var g = b.group({\n        \"login\": b.control(\"some value\", validations.required)\n      });\n\n      expect(g.controls[\"login\"].value).toEqual(\"some value\");\n      expect(g.controls[\"login\"].validator).toBe(validations.required);\n    });\n\n    it(\"should create groups with optional controls\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"optionals\": {\"login\" : false}});\n\n      expect(g.contains(\"login\")).toEqual(false);\n    });\n\n    it(\"should create groups with a custom validator\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      }, {\"validator\": validations.nullValidator});\n\n      expect(g.validator).toBe(validations.nullValidator);\n    });\n\n    it(\"should use default validators when no validators are provided\", () => {\n      var g = b.group({\n        \"login\": \"some value\"\n      });\n      expect(g.controls[\"login\"].validator).toBe(validations.nullValidator);\n      expect(g.validator).toBe(validations.controlGroupValidator);\n    });\n  });\n}"]}