{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","benchmarks/e2e_test/naive_infinite_scroll_spec.es6","benchmarks/e2e_test/naive_infinite_scroll_spec.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,IAAoB,UAAS,SAAQ;;;ACApD,OAAO;AACD,UAAM,IAAmB;AACzB,UAAM;eCFG,CAAA,OAAO,AAAC,CAAA,gCAA+B,CAAC;AAEvD,aAAO,AAAE,CAAA,qCAAoC,CAAG,UAAU,AAAE;AAEtD,UAAA,CAAA,GAAE,EAAI,4DAA0D,CAAC;AAErE,gBAAQ,AAAE,CAAA,QAAO,sBAAsB,CAAC,CAAC;AAEzC,SAAE,AAAC,CAAA,yBAAwB,CAAG,UAAQ,AAAG;AACvC,gBAAM,IAAI,AAAE,CAAA,GAAE,CAAC,CAAC;AACZ,YAAA,CAAA,gBAAe,EAAI,GAAC,CAAC;AACrB,YAAA,CAAA,mBAAkB,EAAI,GAAC,CAAC;AACxB,YAAA,CAAA,cAAa,EAAI,mCAAiC,CAAC;AACnD,YAAA,CAAA,KAAI,IAAQ,cAAa,EAAA,UAAU,CAAA,CAAC;AACpC,YAAA,CAAA,YAAW,IACP,cAAa,EAAA,6BAA6B,CAAA,CAAC;AAE/C,YAAA,CAAA,KAAI,EAAI,UAAS,QAAO,CAAG;AAC7B,iBAAO,CAAA,OAAM,cAAe,AAC1B,EAAA,qCAAsC,EAAA,SAAO,EAAA,cAAa,EAC5D,CAAC;UACH,CAAA;AAEI,YAAA,CAAA,YAAW,EAAI,UAAS,QAAO,CAAG;AACpC,iBAAO,CAAA,OAAM,cAAe,AAC1B,EAAA,2BAA4B,EAAA,SAAO,EAAA,eAAc,EACnD,CAAC;UACH,CAAA;AAEI,YAAA,CAAA,WAAU,EAAI,UAAS,QAAO,CAAG;AACnC,iBAAO,CAAA,OAAM,cAAe,AAC1B,EAAA,kCAAmC,EAAA,SAAO,EAAA,iBAAgB,EAC5D,CAAC;UACH,CAAA;AAGA,cAAI,AAAE,CAAA,cAAa,CAAC,KAAK,AAAE,CAAA,SAAS,CAAA,CAAG;AACrC,iBAAK,AAAE,CAAA,CAAA,CAAC,KAAK,AAAE,CAAA,gBAAe,CAAC,CAAC;UAClC,CAAC,CAAC;AAGF,cAAK,AAAC,CAAA,KAAI,CAAC,KAAK,AAAE,CAAA,SAAS,CAAA,CAAG;AAC5B,iBAAM,AAAC,CAAA,CAAA,CAAC,KAAM,AAAC,CAAA,gBAAe,EAAI,oBAAkB,CAAC,CAAC;UACxD,CAAC,CAAC;AAGF,oBAAW,AAAC,EAAI,YAAW,EAAA,WAAW,EAAC,KAAK,AAAE,CAAA,SAAS,IAAG,CAAG;AAC3D,iBAAM,AAAC,CAAA,IAAG,CAAC,KAAK,AAAE,CAAA,SAAQ,CAAC,CAAC;AAC5B,uBAAY,AAAC,EAAI,YAAW,EAAA,WAAW,EAAC,KAAK,AAAE,CAAA,SAAQ,AAAG,CAAA;AACxD,wBAAU,AAAE,EAAI,YAAW,EAAA,WAAW,EAAC,KAAM,AAAC,CAAA,SAAS,IAAG,CAAG;AAC3D,qBAAK,AAAE,CAAA,IAAG,CAAC,KAAK,AAAE,CAAA,KAAI,CAAC,CAAC;cAC1B,CAAC,CAAA;YACH,CAAC,CAAC;UACJ,CAAC,CAAA;AAED,UAAA,AAAE,CAAA,YAAW,CAAC,MAAM,AAAC,EAAC,CAAC;AACvB,UAAA,AAAE,CAAA,UAAS,CAAC,MAAO,EAAC,CAAC;AACrB,gBAAM,KAAM,AAAC,EAAC,SAAA,CAAK;AACjB,iBAAO,CAAA,CAAA,AAAE,CAAA,OAAM,CAAC,QAAS,EAAC,KAAM,AAC9B,CAAA,SAAS,AAAE,CAAA;AAAE,mBAAO,KAAG,CAAC;YAAE,CAC1B,UAAS,AAAE,CAAA;AAAE,mBAAO,MAAI,CAAC;YAAE,CAAC,CAAC;UAC/B,EAAG,MAAI,CAAC,CAAC;QACb,CAAC,CAAC;MAEJ,CAAC,CAAC;ID9D6B;EAC3B,CAAA;ADDI,CAAC,CAAC;AG8C0C","file":"benchmarks/e2e_test/naive_infinite_scroll_spec.js","sourceRoot":"/Users/crush/Documents/learning_js/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","var testUtil = require('angular2/src/test_lib/e2e_util');\n\ndescribe('ng2 naive infinite scroll benchmark', function () {\n\n  var URL = 'benchmarks/src/naive_infinite_scroll/index.html?appSize=3';\n\n  afterEach(testUtil.verifyNoBrowserErrors);\n\n  it('should not throw errors', function() {\n    browser.get(URL);\n    var expectedRowCount = 18;\n    var expectedCellsPerRow = 28;\n    var allScrollItems = 'scroll-app #testArea scroll-item';\n    var cells = `${ allScrollItems } .row *`;\n    var stageButtons =\n        `${ allScrollItems } .row stage-buttons button`;\n\n    var count = function(selector) {\n      return browser.executeScript(\n        `return document.querySelectorAll(\"${ selector }\").length;`\n      );\n    }\n\n    var clickFirstOf = function(selector) {\n      return browser.executeScript(\n        `document.querySelector(\"${ selector }\").click();`\n      );\n    }\n\n    var firstTextOf = function(selector) {\n      return browser.executeScript(\n        `return document.querySelector(\"${ selector }\").innerText;`\n      );\n    }\n\n    // Make sure rows are rendered\n    count(allScrollItems).then(function(c) {\n      expect(c).toBe(expectedRowCount);\n    });\n\n    // Make sure cells are rendered\n    count(cells).then(function(c) {\n      expect(c).toBe(expectedRowCount * expectedCellsPerRow);\n    });\n\n    // Click on first enabled button and verify stage changes\n    firstTextOf(`${ stageButtons }:enabled`).then(function(text) {\n      expect(text).toBe('Pitched');\n      clickFirstOf(`${ stageButtons }:enabled`).then(function() {\n        firstTextOf(`${ stageButtons }:enabled`).then(function(text) {\n          expect(text).toBe('Won');\n        })\n      });\n    })\n\n    $(\"#reset-btn\").click();\n    $(\"#run-btn\").click();\n    browser.wait(() => {\n      return $('#done').getText().then(\n        function() { return true; },\n        function() { return false; });\n      }, 10000);\n  });\n\n});\n","var testUtil = require('angular2/src/test_lib/e2e_util');\ndescribe('ng2 naive infinite scroll benchmark', function() {\n  var URL = 'benchmarks/src/naive_infinite_scroll/index.html?appSize=3';\n  afterEach(testUtil.verifyNoBrowserErrors);\n  it('should not throw errors', function() {\n    browser.get(URL);\n    var expectedRowCount = 18;\n    var expectedCellsPerRow = 28;\n    var allScrollItems = 'scroll-app #testArea scroll-item';\n    var cells = `${allScrollItems} .row *`;\n    var stageButtons = `${allScrollItems} .row stage-buttons button`;\n    var count = function(selector) {\n      return browser.executeScript(`return document.querySelectorAll(\"${selector}\").length;`);\n    };\n    var clickFirstOf = function(selector) {\n      return browser.executeScript(`document.querySelector(\"${selector}\").click();`);\n    };\n    var firstTextOf = function(selector) {\n      return browser.executeScript(`return document.querySelector(\"${selector}\").innerText;`);\n    };\n    count(allScrollItems).then(function(c) {\n      expect(c).toBe(expectedRowCount);\n    });\n    count(cells).then(function(c) {\n      expect(c).toBe(expectedRowCount * expectedCellsPerRow);\n    });\n    firstTextOf(`${stageButtons}:enabled`).then(function(text) {\n      expect(text).toBe('Pitched');\n      clickFirstOf(`${stageButtons}:enabled`).then(function() {\n        firstTextOf(`${stageButtons}:enabled`).then(function(text) {\n          expect(text).toBe('Won');\n        });\n      });\n    });\n    $(\"#reset-btn\").click();\n    $(\"#run-btn\").click();\n    browser.wait(() => {\n      return $('#done').getText().then(function() {\n        return true;\n      }, function() {\n        return false;\n      });\n    }, 10000);\n  });\n});\n\n//# sourceMappingURL=/Users/crush/Documents/learning_js/angular/modules/benchmarks/e2e_test/naive_infinite_scroll_spec.map\n\n//# sourceMappingURL=./naive_infinite_scroll_spec.map"]}